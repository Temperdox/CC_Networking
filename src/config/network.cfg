-- /etc/network.cfg
-- Network configuration file for ComputerCraft network stack
-- This file is loaded by the network daemon (netd)

local config = {}

-- Get computer-specific information
local computerId = os.getComputerID()
local computerLabel = os.getComputerLabel() or ""

-- Network interface configuration
config.modem_side = "auto"  -- Can be "top", "bottom", "left", "right", "front", "back", or "auto"
config.proto = "ccnet"      -- Main protocol name for network communication
config.discovery_proto = "ccnet_discovery"
config.dns_proto = "ccnet_dns"
config.arp_proto = "ccnet_arp"
config.http_proto = "ccnet_http"
config.ws_proto = "ccnet_ws"

-- Generate MAC address based on computer ID
-- Format: CC:AF:XX:XX:XX:XX where CC:AF is ComputerCraft prefix
local function generateMAC(id)
    if bit and bit.band and bit.brshift then
        local bytes = {
            0xCC,  -- ComputerCraft vendor prefix
            0xAF,  -- Additional vendor byte
            bit.band(bit.brshift(id, 24), 0xFF),
            bit.band(bit.brshift(id, 16), 0xFF),
            bit.band(bit.brshift(id, 8), 0xFF),
            bit.band(id, 0xFF)
        }

        local mac = ""
        for i, byte in ipairs(bytes) do
            if i > 1 then mac = mac .. ":" end
            mac = mac .. string.format("%02X", byte)
        end

        return mac
    else
        -- Fallback for systems without bit operations
        return string.format("CC:AF:00:00:%02X:%02X",
            math.floor(id / 256), id % 256)
    end
end

-- Generate IP address based on computer ID
local function generateIP(id)
    -- Use 10.0.X.X subnet for local network
    local subnet = "10.0"
    local thirdOctet = math.floor(id / 254) % 256
    local fourthOctet = (id % 254) + 1
    return string.format("%s.%d.%d", subnet, thirdOctet, fourthOctet)
end

-- Generate hostname
local function generateHostname(id, label)
    if label ~= "" then
        -- Sanitize label for hostname use
        label = label:lower():gsub("[^%w%-]", "")
        return string.format("%s-%d", label, id)
    else
        return string.format("cc-%d", id)
    end
end

-- Basic configuration
config.id = computerId
config.mac = generateMAC(computerId)
config.ipv4 = generateIP(computerId)
config.ipv6 = nil  -- IPv6 not implemented yet
config.hostname = generateHostname(computerId, computerLabel)
config.domain = "local"
config.fqdn = config.hostname .. "." .. config.domain

-- Network settings
config.subnet_mask = "255.255.0.0"
config.gateway = "10.0.0.1"
config.dns = {
    primary = "10.0.0.1",
    secondary = "8.8.8.8"
}

-- Interface configuration
config.interfaces = {
    lo = {
        name = "lo",
        type = "loopback",
        ip = "127.0.0.1",
        netmask = "255.0.0.0",
        mac = "00:00:00:00:00:00",
        status = "up",
        mtu = 65536
    },
    eth0 = {
        name = "eth0",
        type = "ethernet",
        ip = config.ipv4,
        netmask = config.subnet_mask,
        mac = config.mac,
        gateway = config.gateway,
        status = "up",
        mtu = 1500
    }
}

-- Routing table
config.routes = {
    {
        destination = "0.0.0.0",
        gateway = config.gateway,
        genmask = "0.0.0.0",
        interface = "eth0",
        metric = 100,
        flags = "UG"  -- U=up, G=gateway
    },
    {
        destination = "10.0.0.0",
        gateway = "0.0.0.0",
        genmask = "255.255.0.0",
        interface = "eth0",
        metric = 0,
        flags = "U"
    },
    {
        destination = "127.0.0.0",
        gateway = "0.0.0.0",
        genmask = "255.0.0.0",
        interface = "lo",
        metric = 0,
        flags = "U"
    }
}

-- Services to enable
config.services = {
    dns = { enabled = true, port = 53 },
    http = { enabled = true, port = 80 },
    https = { enabled = false, port = 443 },
    websocket = { enabled = true, port = 8080 },
    ssh = { enabled = false, port = 22 },
    ftp = { enabled = false, port = 21 },
    mqtt = { enabled = false, port = 1883 },
    discovery = { enabled = true, interval = 30 }  -- Broadcast interval in seconds
}

-- Cache settings
config.cache = {
    dns_ttl = 300,      -- DNS cache TTL in seconds
    arp_ttl = 600,      -- ARP cache TTL in seconds
    route_ttl = 3600    -- Route cache TTL in seconds
}

-- Logging
config.logging = {
    enabled = true,
    level = "info",  -- trace, debug, info, warn, error
    file = "/var/log/netd.log",
    max_size = 10000  -- Max log entries
}

-- Advanced settings
config.advanced = {
    packet_queue_size = 100,
    connection_timeout = 30,
    max_connections = 50,
    broadcast_interval = 30,
    enable_forwarding = false,  -- Act as router
    enable_nat = false          -- Network Address Translation
}

return config
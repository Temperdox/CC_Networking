-- /etc/wireless.cfg
-- Wireless network configuration for ComputerCraft systems
-- This file manages wireless modem settings and protocols

local config = {}

-- System identification
config.computer_id = os.getComputerID()
config.computer_label = os.getComputerLabel() or ("wireless-" .. os.getComputerID())

-- Wireless modem configuration
config.modem = {
    -- Modem detection and setup
    auto_detect = true,
    preferred_side = "auto",  -- "auto", "top", "bottom", "left", "right", "front", "back"
    fallback_sides = {"top", "back", "right", "left", "front", "bottom"},

    -- Modem settings
    enabled = true,
    auto_open = true,
    startup_delay = 1.0,  -- seconds to wait before initializing

    -- Channel configuration
    channels = {
        primary = os.getComputerID(),      -- Computers own channel
        broadcast = 65535,                 -- Broadcast channel
        discovery = 65534,                 -- Network discovery
        control = 65533,                   -- Control messages
        emergency = 65532,                 -- Emergency communications

        -- Protocol-specific channels
        rednet = 65536,                    -- Rednet protocol (if used)
        custom_start = 1000,               -- Start of custom channel range
        custom_end = 9999                  -- End of custom channel range
    },

    -- Range and power settings
    range = {
        max_range = 2000,                  -- Maximum transmission range
        default_range = 500,               -- Default range for most operations
        low_power_range = 100,             -- Low power mode range
        emergency_range = 2000             -- Emergency transmission range
    }
}

-- Wireless networking protocols
config.protocols = {
    -- ComputerCraft Network Protocol
    ccnet = {
        enabled = true,
        channel_base = 2000,
        protocol_id = "ccnet_v1",

        -- Protocol features
        features = {
            encryption = false,
            compression = false,
            acknowledgment = true,
            fragmentation = true,
            routing = true
        },

        -- Packet settings
        packet = {
            max_size = 8192,               -- Maximum packet size in bytes
            fragment_size = 1024,          -- Fragment size for large packets
            timeout = 5,                   -- Packet timeout in seconds
            retries = 3,                   -- Number of retries
            ttl = 64                       -- Time to live (hop count)
        }
    },

    -- Rednet compatibility
    rednet = {
        enabled = true,
        auto_host = true,
        hostname = config.computer_label,

        -- Rednet protocols to host
        host_protocols = {
            "dns", "file_transfer", "chat", "control"
        }
    },

    -- Mesh networking protocol
    mesh = {
        enabled = false,
        mesh_id = "cc_mesh_001",
        node_id = config.computer_id,

        -- Mesh settings
        discovery_interval = 30,           -- Seconds between discovery broadcasts
        route_update_interval = 60,        -- Seconds between routing table updates
        max_hops = 10,                     -- Maximum number of hops

        -- Routing algorithm
        routing = {
            algorithm = "distance_vector",  -- "distance_vector", "link_state"
            metric = "hop_count",          -- "hop_count", "signal_strength", "latency"
            convergence_time = 120         -- Seconds for network convergence
        }
    },

    -- Custom protocol framework
    custom = {
        enabled = true,
        base_channel = 5000,
        protocols = {
            -- Define custom protocols here
            -- Example:
            -- sensor_net = {
            --     channel = 5001,
            --     encryption = true,
            --     broadcast_interval = 10
            -- }
        }
    }
}

-- Security configuration
config.security = {
    -- Encryption settings
    encryption = {
        enabled = false,
        default_algorithm = "aes128",     -- "aes128", "aes256", "chacha20"
        key_exchange = "ecdh",            -- "rsa", "ecdh", "static"

        -- Key management
        keys = {
            rotation_interval = 3600,      -- Seconds between key rotations
            storage_path = "/etc/wireless/keys/",
            backup_keys = 3
        }
    },

    -- Authentication
    authentication = {
        enabled = false,
        method = "psk",                   -- "psk" (pre-shared key), "cert", "none"
        preshared_key = "default_key_change_me",
        timeout = 30
    },

    -- Access control
    access_control = {
        enabled = false,
        mode = "whitelist",               -- "whitelist", "blacklist", "open"

        whitelist = {
            -- "CC:AF:01:02:03:04",
            -- "CC:AF:01:02:03:05"
        },

        blacklist = {
            -- "CC:AF:FF:FF:FF:FF"
        }
    }
}

-- Quality of Service
config.qos = {
    enabled = false,

    -- Traffic classes
    classes = {
        emergency = {priority = 7, bandwidth_percent = 10},
        control = {priority = 6, bandwidth_percent = 15},
        realtime = {priority = 5, bandwidth_percent = 25},
        normal = {priority = 3, bandwidth_percent = 40},
        bulk = {priority = 1, bandwidth_percent = 10}
    },

    -- Bandwidth management
    bandwidth = {
        total_limit = 0,                  -- 0 = unlimited, otherwise bits per second
        per_client_limit = 0,
        burst_limit = 0
    },

    -- Queue management
    queues = {
        max_size = 100,                   -- Maximum packets per queue
        drop_policy = "tail_drop",        -- "tail_drop", "random_drop"
        congestion_threshold = 80         -- Percentage full before dropping
    }
}

-- Network topology and discovery
config.discovery = {
    enabled = true,

    -- Discovery methods
    methods = {
        broadcast = true,                 -- Broadcast discovery
        multicast = false,                -- Multicast discovery (if supported)
        unicast_probe = true             -- Probe known addresses
    },

    -- Discovery timing
    timing = {
        initial_delay = 5,                -- Seconds before first discovery
        interval = 60,                    -- Seconds between discoveries
        timeout = 10,                     -- Seconds to wait for responses
        max_age = 300                     -- Seconds before nodes are considered stale
    },

    -- Information to share
    advertise = {
        hostname = true,
        services = true,
        capabilities = true,
        location = false,
        load = false
    }
}

-- Service configuration
config.services = {
    -- Network services to run
    dhcp_server = {
        enabled = false,
        ip_range_start = "10.0.1.100",
        ip_range_end = "10.0.1.200",
        lease_time = 3600,
        gateway = "10.0.1.1",
        dns_servers = {"10.0.1.1"}
    },

    dns_server = {
        enabled = false,
        port = 53,
        upstream_servers = {"8.8.8.8", "8.8.4.4"},
        cache_size = 1000,
        cache_ttl = 300
    },

    time_server = {
        enabled = false,
        port = 123,
        upstream_servers = {"pool.ntp.org"},
        sync_interval = 3600
    },

    file_server = {
        enabled = false,
        port = 21,
        root_directory = "/shared/",
        read_only = false
    }
}

-- Monitoring and logging
config.monitoring = {
    enabled = true,

    -- Statistics to collect
    stats = {
        packets_sent = true,
        packets_received = true,
        bytes_transmitted = true,
        signal_strength = true,
        error_rate = true,
        latency = true
    },

    -- Monitoring intervals
    collection_interval = 30,            -- Seconds between stat collections
    report_interval = 300,               -- Seconds between reports
    history_retention = 86400,           -- Seconds to keep historical data

    -- Storage
    stats_file = "/var/run/wireless_stats.dat",
    log_file = "/var/log/wireless.log",
    max_log_size = 10000
}

-- Power management
config.power = {
    enabled = false,

    -- Power saving modes
    modes = {
        normal = {tx_power = 100, scan_interval = 30},
        eco = {tx_power = 75, scan_interval = 60},
        deep_sleep = {tx_power = 25, scan_interval = 300}
    },

    current_mode = "normal",

    -- Automatic power management
    auto_management = {
        enabled = false,
        battery_threshold_eco = 25,       -- Switch to eco mode at 25% battery
        battery_threshold_sleep = 10,     -- Switch to sleep mode at 10% battery
        load_threshold = 80               -- Consider load when switching modes
    }
}

-- Experimental features
config.experimental = {
    -- Advanced features that may be unstable
    enabled = false,

    features = {
        software_defined_radio = false,
        cognitive_radio = false,
        beamforming = false,
        mimo = false,
        carrier_aggregation = false
    },

    -- Beta protocols
    beta_protocols = {
        ccnet_v2 = false,
        quantum_crypto = false,
        ai_routing = false
    }
}

-- Regional and regulatory settings
config.regulatory = {
    region = "US",                        -- Regulatory region
    indoor_use = true,

    -- Frequency restrictions
    frequency_bands = {
        ["2400-2500"] = {enabled = true, max_power = 20},  -- 2.4 GHz ISM band
        ["5000-6000"] = {enabled = false, max_power = 23}, -- 5 GHz band (if supported)
    },

    -- Compliance settings
    compliance = {
        fcc_part_15 = true,
        etsi_en_300 = false,
        ic_rss = false
    }
}

-- Backup and recovery
config.backup = {
    enabled = true,

    -- What to backup
    components = {
        configuration = true,
        keys = true,
        logs = false,
        statistics = false
    },

    -- Backup settings
    location = "/var/backups/wireless/",
    frequency = "daily",                  -- "hourly", "daily", "weekly"
    retention = 7,                        -- Number of backups to keep
    compression = true
}

return config